/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package NotePadApplication.gui;

import FileClasses.SaveFile;
import com.sun.webkit.plugin.PluginManager;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Highlighter;
import javax.swing.undo.UndoManager;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import static javax.tools.ToolProvider.getSystemToolClassLoader;

/**
 *
 * @author priya
 */
public class TextEditor extends javax.swing.JFrame {
    boolean saved=false;
    String Text=null;
    String path=null;
    UndoManager undoManager=new UndoManager();
    Font font;
    Font defaultFont;
    boolean changed=false;
    boolean AlreadySaved=false;
    
    public TextEditor() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("AdvanceNotpad-Untitled");
        textArea.getDocument().addUndoableEditListener(undoManager);
        System.out.println("doc is "+textArea.getDocument());
        defaultFont=textArea.getFont();
        font=textArea.getFont();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        menuNewWin = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        menuSave = new javax.swing.JMenuItem();
        menuSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuPageSetup = new javax.swing.JMenuItem();
        menuPrint = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmenuUndo = new javax.swing.JMenuItem();
        jmenuRedo = new javax.swing.JMenuItem();
        jmenuCut = new javax.swing.JMenuItem();
        jmenuCopy = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jmenuDel = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jmenuFind = new javax.swing.JMenuItem();
        jmenuFindNext = new javax.swing.JMenuItem();
        jmenuFindPrevious = new javax.swing.JMenuItem();
        jmenuReplace = new javax.swing.JMenuItem();
        jmenuGoTo = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        miFont = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 400));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        jPanel1.setAutoscrolls(true);

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setBorder(null);
        jMenuBar1.setAlignmentY(0.5F);
        jMenuBar1.setBorderPainted(false);

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        menuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew.setText("New");
        menuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewActionPerformed(evt);
            }
        });
        jMenu1.add(menuNew);

        menuNewWin.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuNewWin.setText("New Window");
        menuNewWin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewWinActionPerformed(evt);
            }
        });
        jMenu1.add(menuNewWin);

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText("Open....");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpen);

        menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave.setText("Save");
        menuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(menuSave);

        menuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuSaveAs.setText("Save as....");
        menuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(menuSaveAs);
        jMenu1.add(jSeparator1);

        menuPageSetup.setText("Page Setup....");
        menuPageSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPageSetupActionPerformed(evt);
            }
        });
        jMenu1.add(menuPageSetup);

        menuPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        menuPrint.setText("Print...");
        jMenu1.add(menuPrint);
        jMenu1.add(jSeparator2);

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jMenu2StateChanged(evt);
            }
        });

        jmenuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jmenuUndo.setText("Undo");
        jmenuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuUndoActionPerformed(evt);
            }
        });
        jMenu2.add(jmenuUndo);

        jmenuRedo.setText("Redo");
        jmenuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuRedoActionPerformed(evt);
            }
        });
        jMenu2.add(jmenuRedo);

        jmenuCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jmenuCut.setText("Cut");
        jmenuCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuCutActionPerformed(evt);
            }
        });
        jMenu2.add(jmenuCut);

        jmenuCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jmenuCopy.setText("Copy");
        jmenuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuCopyActionPerformed(evt);
            }
        });
        jMenu2.add(jmenuCopy);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Paste");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem12);

        jmenuDel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jmenuDel.setText("Delete");
        jmenuDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuDelActionPerformed(evt);
            }
        });
        jMenu2.add(jmenuDel);

        jMenuItem15.setText("Search with other");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem15);

        jmenuFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jmenuFind.setText("Find.....");
        jmenuFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuFindActionPerformed(evt);
            }
        });
        jMenu2.add(jmenuFind);

        jmenuFindNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jmenuFindNext.setText("Find Next");
        jMenu2.add(jmenuFindNext);

        jmenuFindPrevious.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.SHIFT_MASK));
        jmenuFindPrevious.setText("Find Previous");
        jMenu2.add(jmenuFindPrevious);

        jmenuReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jmenuReplace.setText("Replace");
        jMenu2.add(jmenuReplace);

        jmenuGoTo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jmenuGoTo.setText("Go To....");
        jmenuGoTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuGoToActionPerformed(evt);
            }
        });
        jMenu2.add(jmenuGoTo);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem21.setText("Select All");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem21);

        jMenuItem22.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem22.setText("Time/Date");
        jMenu2.add(jMenuItem22);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Format");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Word Wrap");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        miFont.setText("Font....");
        miFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFontActionPerformed(evt);
            }
        });
        jMenu3.add(miFont);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("View");

        jMenu6.setText("Zoom");

        jMenuItem23.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem23.setText("Zoom In");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem23);

        jMenuItem24.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem24.setText("Zoom Out");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem24);

        jMenuItem25.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem25.setText("Restore Default Zoom");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem25);

        jMenu4.add(jMenu6);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Status Bar");
        jMenu4.add(jCheckBoxMenuItem2);

        jMenuBar1.add(jMenu4);

        jMenu7.setText("Advance Tools");
        jMenuBar1.add(jMenu7);

        jMenu5.setText("Help");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        AlreadySaved=true;
        String path=FileOpenPopUp.jChooserControl();
        System.out.println("open ptg"+ path);
        if(path!=null){
            try {
                FileReader fileReader=new FileReader(new File(path));
                StringBuilder sb =new StringBuilder();
                int i;
                while((i=fileReader.read())!=-1){
                    System.out.println("i is"+(char)i);
                    sb.append((char)i);
                }
                textArea.setText(sb.toString());
                setTitle("AdvanceNotpad" +"-"+path.substring(path.lastIndexOf("\\")+1));
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_menuOpenActionPerformed

    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
        saveFile();
        
        
            
        
        
       
    }//GEN-LAST:event_menuSaveActionPerformed

    private void menuPageSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPageSetupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuPageSetupActionPerformed

    private void jmenuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuUndoActionPerformed
        System.out.println("undo ");
        if(undoManager.canUndo())
            undoManager.undo();
    }//GEN-LAST:event_jmenuUndoActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        textArea.paste();      // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jmenuGoToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuGoToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmenuGoToActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
              textArea.setFont(defaultFont);
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void menuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewActionPerformed
        if(changed){
            
       
            if(saved==false){
                int ans;
                if(AlreadySaved ){
                    ans=JOptionPane.showConfirmDialog(null, "Do you want to save changes for" , "TextEditor", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                
                }else{
                    ans=JOptionPane.showConfirmDialog(null, "Do you want to save this File" , "TextEditor", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                
                }
                ans=JOptionPane.showConfirmDialog(null, "Do you want to save changes for" , "TextEditor", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if(ans==JOptionPane.YES_OPTION){
                    System.out.println("yy");
                    if(saveFile()==false)return;
                    System.out.println("no ret");
                }
                else if(ans==JOptionPane.CANCEL_OPTION || ans==JOptionPane.CLOSED_OPTION)
                    return;    
            }     
         }
       
            TextEditor textEditor=new TextEditor();
            textEditor.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_menuNewActionPerformed

    private void menuNewWinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewWinActionPerformed
        TextEditor textEditor=new TextEditor();
        textEditor.setVisible(true);
        
    }//GEN-LAST:event_menuNewWinActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("aa");
        if(changed){
           
           
       
        
            if(saved==false){
                
                int ans;
                if(AlreadySaved ){
                    ans=JOptionPane.showConfirmDialog(null, "Do you want to save changes for" , "TextEditor", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                
                }else{
                    ans=JOptionPane.showConfirmDialog(null, "Do you want to save this File" , "TextEditor", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                
                }
                
                if(ans==JOptionPane.YES_OPTION){
                    System.out.println("yy");
                    if(saveFile()==false)return;
                    System.out.println("no ret");
                }
                else if(ans==JOptionPane.CANCEL_OPTION || ans==JOptionPane.CLOSED_OPTION){
                    System.out.println("if wrk"+ans);
                    return;
                }
                    
            } 
       }   
        System.exit(0);
       
    }//GEN-LAST:event_formWindowClosing

    private void textAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyTyped
        System.out.println("key action");
        changed=true;
        saved=false;
        if(saved==false){
           setTitle("*"+getTitle().substring(getTitle().lastIndexOf("*")+1));
        } 
       
        


//        System.out.println("key typed event pef"+ evt.getKeyChar() +" and evt.getKeyChar()==" +(evt.getKeyChar()=='')); 
//        if(evt.getKeyChar()==''){
//            System.out.println("Hello");
//            return;
//        }
//            
        
       
        
    }//GEN-LAST:event_textAreaKeyTyped

    private void menuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveAsActionPerformed
        path =FileChooserPopUp.jChooserControl();
        saveFile();
    }//GEN-LAST:event_menuSaveAsActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed

        if(changed){
            
       
            if(saved==false){
                int ans=JOptionPane.showConfirmDialog(null, "Do you want to save changes for" , "TextEditor", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if(ans==JOptionPane.YES_OPTION){
                    System.out.println("yy");
                    if(saveFile()==false)return;
                    System.out.println("no ret");
                }
                else if(ans==JOptionPane.CANCEL_OPTION || ans==JOptionPane.CLOSED_OPTION)
                    return;   
         
            } 
        }    this.dispose();
    }//GEN-LAST:event_menuExitActionPerformed

    private void jmenuCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuCutActionPerformed
        System.out.println("cut");
       textArea.cut();
    }//GEN-LAST:event_jmenuCutActionPerformed

    private void jmenuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuCopyActionPerformed
        textArea.copy();        // TODO add your handling code here:
    }//GEN-LAST:event_jmenuCopyActionPerformed

    private void jmenuDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuDelActionPerformed
        textArea.replaceSelection("");       // TODO add your handling code here:
    }//GEN-LAST:event_jmenuDelActionPerformed

    private void jmenuFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuFindActionPerformed
        Highlighter highlighter=textArea.getHighlighter();
        textArea.getText().indexOf(path);        // TODO add your handling code here:
    }//GEN-LAST:event_jmenuFindActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        textArea.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        if(jCheckBoxMenuItem1.getState())
            textArea.setLineWrap(true);
        else
            textArea.setLineWrap(false);
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        font=new Font(font.getName(),font.getStyle(),font.getSize()+4);
        textArea.setFont(font);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
           font=new Font(font.getName(),font.getStyle(),font.getSize()-4);
           textArea.setFont(font);
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenu2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jMenu2StateChanged
        System.out.println("sttt");   
        if(textArea.getSelectedText()==null){
            jmenuCopy.setEnabled(false);
            jmenuCut.setEnabled(false);
            jmenuDel.setEnabled(false);
            jmenuFind.setEnabled(false);
            jmenuFindNext.setEnabled(false);
            jmenuFindPrevious.setEnabled(false);
            jmenuGoTo.setEnabled(false);
            jmenuReplace.setEnabled(false);
        }
//        if(undoManager.){
//            jmenuUndo.setEnabled(false);
//        }
//        if(undoManager.canRedo()){
//            jmenuRedo.setEnabled(false);
//        }
    }//GEN-LAST:event_jMenu2StateChanged

    private void jmenuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuRedoActionPerformed
        System.out.println("undo ");
        if(undoManager.canRedo())
            undoManager.redo();
    }//GEN-LAST:event_jmenuRedoActionPerformed

    private void miFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFontActionPerformed
        Font font =textArea.getFont();
        FontFrame fontFrame=new FontFrame(font,this);
        fontFrame.setVisible(true );
        
        




//        JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
//        ClassLoader  classLoader= ToolProvider.getSystemToolClassLoader();
        
//       try { 
//           
//           InputStream in;
//        
//            in = new  FileInputStream(new File(path));
//         
//        OutputStream out= new FileOutputStream(new File("C:\\Users\\priya\\Documents\\tttttt\\out.txt"));
//        OutputStream err= new FileOutputStream(new File("C:\\Users\\priya\\Documents\\tttttt\\err.txt"));
//        int ans=compiler.run(in, out, err, path);
//            
//           System.out.println(ans);
//           
//           System.out.println(classLoader.loadClass("Hello.class"));
//           }   catch (FileNotFoundException ex) {
//            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_miFontActionPerformed

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowDeactivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem jmenuCopy;
    private javax.swing.JMenuItem jmenuCut;
    private javax.swing.JMenuItem jmenuDel;
    private javax.swing.JMenuItem jmenuFind;
    private javax.swing.JMenuItem jmenuFindNext;
    private javax.swing.JMenuItem jmenuFindPrevious;
    private javax.swing.JMenuItem jmenuGoTo;
    private javax.swing.JMenuItem jmenuRedo;
    private javax.swing.JMenuItem jmenuReplace;
    private javax.swing.JMenuItem jmenuUndo;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuNew;
    private javax.swing.JMenuItem menuNewWin;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuPageSetup;
    private javax.swing.JMenuItem menuPrint;
    private javax.swing.JMenuItem menuSave;
    private javax.swing.JMenuItem menuSaveAs;
    private javax.swing.JMenuItem miFont;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    private boolean saveFile() {
        
            
        AlreadySaved=true;
        try{
            if(path==null){
                 path =FileChooserPopUp.jChooserControl();
                 
            }
            Text=textArea.getText();
            System.out.println(path);
            
            if(path!=null){
             SaveFile.saveFile(Text, path); saved=true; 
             if(saved){
            
            setTitle("AdvanceNotpad" +"-"+path.substring(path.lastIndexOf("\\")+1));
            changed=false;
        }
            }
                
        }
        catch(Exception ex){
            System.out.println("Excep in saveFilemethod");
            ex.printStackTrace();
        }
        return false;
    }
   public void setChangedFont(Font font){
       textArea.setFont(font);
       
       
   }

    }

